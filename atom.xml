<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KyleCe</title>
  
  <subtitle>Embedded/Android</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/KyleCe/kylece.github.io/"/>
  <updated>2019-03-20T15:20:12.909Z</updated>
  <id>https://github.com/KyleCe/kylece.github.io/</id>
  
  <author>
    <name>KyleCe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Corountine Job</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2019/03/20/%E6%8A%80%E6%9C%AF/Android/CorountineJob/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2019/03/20/技术/Android/CorountineJob/</id>
    <published>2019-03-20T15:20:10.000Z</published>
    <updated>2019-03-20T15:20:12.909Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://kylece.github.io/img/corountine_job.jpg" alt="Job"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://kylece.github.io/img/corountine_job.jpg&quot; alt=&quot;Job&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://github.com/KyleCe/kylece.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://github.com/KyleCe/kylece.github.io/tags/Kotlin/"/>
    
      <category term="Corountine" scheme="https://github.com/KyleCe/kylece.github.io/tags/Corountine/"/>
    
  </entry>
  
  <entry>
    <title>Gradle keyword</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2019/03/20/%E6%8A%80%E6%9C%AF/Android/GradleKeyword/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2019/03/20/技术/Android/GradleKeyword/</id>
    <published>2019-03-20T06:52:02.000Z</published>
    <updated>2019-03-20T15:19:28.064Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://kylece.github.io/img/gradle_keyword.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://kylece.github.io/img/gradle_keyword.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://github.com/KyleCe/kylece.github.io/tags/Android/"/>
    
      <category term="AndroidStudio" scheme="https://github.com/KyleCe/kylece.github.io/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>WebView内存泄露如何规避</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/04/19/%E6%8A%80%E6%9C%AF/Android/WebView%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/04/19/技术/Android/WebView内存泄露如何规避/</id>
    <published>2018-04-19T08:21:47.000Z</published>
    <updated>2018-04-19T08:21:50.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><ol><li><p>代码中加开关控制</p></li><li><p>versionName/versionCode 加一些规则</p></li><li><p>ChannelID 控制</p></li></ol><h2 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h2><table><thead><tr><th style="text-align:left">方案</th><th style="text-align:center">优缺点</th></tr></thead><tbody><tr><td style="text-align:left">代码开关</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:left">VersionName/VersionCode</td><td style="text-align:center"><ul><li>优势：发包时能够直观看到beta/production；</li><li>弊端：beta用户能够感知到这个版本号</li></ul></td></tr><tr><td style="text-align:left">ChannelID</td><td style="text-align:center">缺点：影响数据统计/分析</td></tr></tbody></table><blockquote><p>关于VersionName/VersionCode区分beta的实现方法：</p><ol><li>可以直接在VersionName中写上alpha/beta 字段区分</li><li>可以利用VersionCode处理（比如奇偶/是否被n整除）</li></ol></blockquote><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><ul><li>推荐方案1或2</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方案：&quot;&gt;&lt;a href=&quot;#方案：&quot; class=&quot;headerlink&quot; title=&quot;方案：&quot;&gt;&lt;/a&gt;方案：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码中加开关控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;versionName/versionCode 加一些规则&lt;/
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android" scheme="https://github.com/KyleCe/kylece.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="https://github.com/KyleCe/kylece.github.io/tags/WebView/"/>
    
      <category term="内存泄露" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>从1到n整数中1出现的次数</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/22/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95--%E4%BB%8E1%E5%88%B0n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/22/技术/算法/算法--从1到n整数中1出现的次数/</id>
    <published>2018-03-22T14:50:23.000Z</published>
    <updated>2018-03-22T15:27:51.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p>输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数<br>例： 输入12，从1到12的这些整数中包含1的数字有 1，10，11，12， 一共出现5次</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>暴力解法：就是遍历，处理每个数的位数，除10取余，判断整数的个位是否为1<br>显然不能用这样的办法来答题</p><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><blockquote><p>暴力——遍历，除10取余看个位，不再展开介绍</p></blockquote><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><blockquote><p>能不能找到一些别的规律，来提高计算效率</p></blockquote><p>我们举个例子：n = 21345<br>将1到n分为两段： 1~1345，1346~21345</p><p>先看第二段 1246~21345：<br>1分两种情况出现。首先分析最高位， 10000~19999这1万个数中，最高位全是1，一共记10^4个，所以对于12345这样的数字，最高位1出现的次数为：<br>2345+1= 2346 次<br>接下来分析1出现在除次高位的情况， 1346~21345这2w个数中，次高位上出现1的次数是2000次（1346~1999，21000~21345），由于最高位是2，我们可以再把1346~21345分成两段，1346~11345，11346~21345，每一段剩下的4位数字中，选择其中一位是1，其余三位为0~9的Any，根据排列组合，总共出现的次数是 2 * 10^3 = 2000次<br>对于1到1345之间的计数，就可以通过递归来求得了：<br>1~21345分成 1~1345， 1346~21345 ，接着，把21345的最高位去掉就变成1345了</p><blockquote><p>分段时候其实有有意这样区分的，目的就是为了使用递归</p></blockquote><h3 id="SourceCode"><a href="#SourceCode" class="headerlink" title="SourceCode"></a>SourceCode</h3><blockquote><p>先将数字转换成字符串</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NumberOf1Between1AndN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> strN[<span class="number">50</span>];</span><br><span class="line">  <span class="built_in">sprintf</span>(strN, <span class="string">"%d"</span>, n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> NumberOf1(strN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* strN)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!strN || *strN &lt; <span class="string">'0'</span> || *strN &gt; <span class="string">'9'</span> || *strN == <span class="string">'\0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> first = *strN - <span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> length = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">strlen</span>(strN));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(length == <span class="number">1</span> &amp;&amp; first == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(length == <span class="number">1</span> &amp;&amp; first &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numberFirstDigit = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(first &gt; <span class="number">1</span>)</span><br><span class="line">    numberFirstDigit = PoserBase10(length - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(first = <span class="number">1</span>)</span><br><span class="line">    numberFirstDigit = atoi(strN + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numOtherDigits = first * (length - <span class="number">1</span>) * PoserBase10(length <span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numRecursive = NumberOf1(strN + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> numberFirstDigit + numOtherDigits + numRecursive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PoserBase10</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    result *= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题&quot;&gt;&lt;a href=&quot;#题&quot; class=&quot;headerlink&quot; title=&quot;题&quot;&gt;&lt;/a&gt;题&lt;/h3&gt;&lt;p&gt;输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数&lt;br&gt;例： 输入12，从1到12的这些整数中包含1的数字有 1，10，11，12， 
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法--连续子数组的最大和</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/20/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95--%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/20/技术/算法/算法--连续子数组的最大和/</id>
    <published>2018-03-20T14:48:11.000Z</published>
    <updated>2018-03-20T15:21:28.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p> 输入一个整型数组（正、负数均有），数组中一个或连续的多个整数组成一个子数组，求所有子数组的最大值。<br> 要求时间复杂度为 <strong>O(n)</strong><br> 例：输入数组为{1, -2, 3, 10, -4, 7, 2, -5}, 和最大的子数组为{3, 10, -4, 7, 2}, 因此输出为该子数组的和为18</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>最直接的解法：枚举所有子数组并求它们的和。长为n的数组，共有 <strong>n*(n + 1)/2</strong> 个子数组。计算出所有子数组之和，最快需要 <strong>O(n^2)</strong>，显然不符合要求</p><h4 id="思路一-举例分析数组规律"><a href="#思路一-举例分析数组规律" class="headerlink" title="思路一 举例分析数组规律"></a>思路一 举例分析数组规律</h4><blockquote><p>通常，举例能够具象化算法，让你能够更直观的看到问题，解算法题时，碰到不好解决的问题，可以尝试举例分析问题规律，降低问题难度</p></blockquote><p>从头到尾逐个累加例中每个数字。初始化和为0：</p><ol><li>加1 和为1</li><li>加-2 和为-1</li><li>加3 上一步的累积和为负数，那么我们不用考虑之前的累积和，从第一个数字开始的子数组也不用考虑 —— 从第三个数开始重新累加 和为3</li><li>加10 和为13</li><li>加-4 和为9 —— 因为-4为负，加上-4后会是累加和变小，所以可以把上一步的13当做暂时发现的最大子和值</li><li>加7 和为16，比之前的最大值13大，更新Result为16</li><li>加2 和为18，更新Result为18</li><li>加-5 和为13</li></ol><p>依据上述步骤，可以确定最大子和是18</p><h4 id="思路二-应用动态规划"><a href="#思路二-应用动态规划" class="headerlink" title="思路二 应用动态规划"></a>思路二 应用动态规划</h4><p>应用递归思想</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(i) = pData[i] <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> f(i - <span class="number">1</span>) &lt;= <span class="number">0</span></span><br><span class="line">      <span class="keyword">else</span> f(i - <span class="number">1</span>) + pData[i]</span><br></pre></td></tr></table></figure><p>当以第i-1个数字结尾的子数组中所有数字之和小于0时，如果把这个负数与i个数累加，得到的结果比第i个数本身还要小，所以这种清空下以第i个数字结尾的子数组就是第i个数字本身；<br>如果以第i-1个数字结尾子数组中所有数字的和大于0，与第i个数字累加就得到以第i个数字结尾的子数组中所有数字的和</p><blockquote><p>用递归的方式分析动态规划问题，最终都是使用循环解决</p></blockquote><h3 id="SourceCode-–-C"><a href="#SourceCode-–-C" class="headerlink" title="SourceCode – C++"></a>SourceCode – C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> g_invalideINput = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>* pData, <span class="keyword">int</span> nLength)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pData == <span class="literal">NULL</span> || nLength &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">    g_invalideINput = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  g_invalideINput = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> nCurSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> nGreatestSum = <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nLength; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nCurSum &lt;= <span class="number">0</span>) nCurSum = pData[i];</span><br><span class="line">    <span class="keyword">else</span> nCurSum += pData[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nCurSum &gt; nGreatestSum)</span><br><span class="line">      nGreatestSum = nCurSum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nGreatestSum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题&quot;&gt;&lt;a href=&quot;#题&quot; class=&quot;headerlink&quot; title=&quot;题&quot;&gt;&lt;/a&gt;题&lt;/h3&gt;&lt;p&gt; 输入一个整型数组（正、负数均有），数组中一个或连续的多个整数组成一个子数组，求所有子数组的最大值。&lt;br&gt; 要求时间复杂度为 &lt;strong&gt;O(
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>最小的k个数</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/19/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95--%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/19/技术/算法/算法--最小的k个数/</id>
    <published>2018-03-19T15:13:18.000Z</published>
    <updated>2018-03-19T15:39:00.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p> 输入n个整数，找出其中最小的k个数<br> 例：输入4、5、1、6、2、7、3、8<br> 则最小的3个数是1、2、3</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先想到最直观的解法是：将数组排序（正序），然后前面k个数字就是最小的k个数<br>时间复杂度就完全取决于所采用的排序算法，并且不借助辅助空间的话，排序也会对原数组的内容造成影响</p><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>递归地进行如下操作：<br>基于数组的第k个数来调整，比k小的数都位于数组左边，比k大的数字都位于数组右边——这样就可以使得数组前的k个数字就是最小的k个数字</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>创建一个大小为k的数据容器来存储最小的k个数字，接下来每次从输入的n个整数中读入一个数。如果容器中已有的数字少于k个，则直接放入；若容器中已满，则将容器中最大值与读入数字进行比较，保留更小的数在容器中</p><p>当容器满时，我们需要做3件事：</p><ol><li>找到max</li><li>可能需要删除这个max</li><li>可能插入一个新数字</li></ol><p>如果用一个二叉树来当容器，那么我们能在O(logk)时间内完成上述3步</p><p>我们可以选用不同的二叉树来实现。鉴于每次都要找到Max，可以使用最大堆</p><blockquote><p>在最大堆中，根节点总是大于它的任意结点——可以在O(1)时间内找到Max（即为根节点）</p></blockquote><p>亦可以用红黑树来实现。</p><blockquote><p>红黑树通过把结点分为红、黑两种颜色并根据一些规则来保证树在一定程度上是平衡的，从而确保在红黑树中查找、删除、插入操作都只需要O(logk)时间<br>在STL中 set与 meltiset都是基于红黑树实现的，可以直接利用</p></blockquote><h3 id="SourceCode-–-C"><a href="#SourceCode-–-C" class="headerlink" title="SourceCode – C++"></a>SourceCode – C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt; intSet;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt;::iterator setIterator;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLeastNumber</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; data, intSet&amp; leastNumvers, <span class="keyword">int</span> k)</span></span>&#123;  </span><br><span class="line">    leastNumvers.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &lt; <span class="number">1</span> || data.size() &lt; k)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator iter = data.begin();</span><br><span class="line">    <span class="keyword">for</span>(; iter != data.end(); ++iter)&#123;</span><br><span class="line">      <span class="keyword">if</span>(leastNumvers.size() &lt; k)&#123;</span><br><span class="line">        leastNumvers.insert(*iter);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        setIterator iterGreatest = leastNumvers.begin();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( *iter &lt; *(leastNumvers.begin()))&#123;</span><br><span class="line">          leastNumvers.erase(iterGreatest);</span><br><span class="line">          leastNumvers.insert(*iter);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题&quot;&gt;&lt;a href=&quot;#题&quot; class=&quot;headerlink&quot; title=&quot;题&quot;&gt;&lt;/a&gt;题&lt;/h3&gt;&lt;p&gt; 输入n个整数，找出其中最小的k个数&lt;br&gt; 例：输入4、5、1、6、2、7、3、8&lt;br&gt; 则最小的3个数是1、2、3&lt;/p&gt;
&lt;h3 id=&quot;分
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>itoa源码</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/18/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95--itoa%E6%BA%90%E7%A0%81/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/18/技术/算法/算法--itoa源码/</id>
    <published>2018-03-18T15:10:20.000Z</published>
    <updated>2018-03-18T15:24:07.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>  atoi     把字符串转换成整型数<br>  itoa     把一整数转换为字符串</p><h3 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h3><ol><li>如果是负数，先转为正数</li><li><p>从各位开始变为字符，直到最高位，最后反转</p><h3 id="SourceCode-–-C语言"><a href="#SourceCode-–-C语言" class="headerlink" title="SourceCode – C语言"></a>SourceCode – C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_itoa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,isNegative = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">100</span>];      <span class="comment">//必须为static变量，或者是全局变量  </span></span><br><span class="line">    <span class="keyword">if</span>((isNegative = n) &lt; <span class="number">0</span>)&#123; <span class="comment">//先将负数转为正数  </span></span><br><span class="line">        n = -n;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;    <span class="comment">//从各位开始变为字符，直到最高位，最后反转  </span></span><br><span class="line">        s[i++] = n%<span class="number">10</span> + <span class="string">'0'</span>;  </span><br><span class="line">        n = n/<span class="number">10</span>;  </span><br><span class="line">    &#125; <span class="keyword">while</span>(n &gt; <span class="number">0</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isNegative &lt; <span class="number">0</span>) &#123;  <span class="comment">//如果是负数，补上负号  </span></span><br><span class="line">        s[i++] = <span class="string">'-'</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    s[i] = <span class="string">'\0'</span>;    <span class="comment">//最后加上字符串结束符  </span></span><br><span class="line">    <span class="keyword">return</span> reverse(s);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h3&gt;&lt;p&gt;  atoi     把字符串转换成整型数&lt;br&gt;  itoa     把一整数转换为字符串&lt;/p&gt;
&lt;h3 id=&quot;如何处理&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>atoi源码</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/17/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95--atoi%E6%BA%90%E7%A0%81/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/17/技术/算法/算法--atoi源码/</id>
    <published>2018-03-17T15:16:35.000Z</published>
    <updated>2018-03-17T15:26:12.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>面试中比较偏重基础的可能会考察到这一类的具体实现</p></blockquote><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>atoi：将字符串转换为数字</p><h3 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h3><p>字符如何隐式的转换为数字：<br>一个char型的字符减去‘0’就会隐式的转换为数字，一个数字加上‘0’则会隐式的转换为字符，明白了这一点，就可以尝试着写atoi了</p><h3 id="SourceCode-–-C语言"><a href="#SourceCode-–-C语言" class="headerlink" title="SourceCode – C语言"></a>SourceCode – C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">my_atoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( *c == <span class="string">'+'</span> || *c == <span class="string">'-'</span> )&#123; <span class="comment">//符号判断</span></span><br><span class="line">        <span class="keyword">if</span>( *c == <span class="string">'-'</span> ) sign = <span class="number">-1</span>; <span class="comment">//记录负数</span></span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*c))&#123; <span class="comment">//处理所有的数字，非数字字符会被过滤掉</span></span><br><span class="line">        value *= <span class="number">10</span>; <span class="comment">//已经处理过的位左移（* 10实现）</span></span><br><span class="line">        value += (<span class="keyword">int</span>) (*c-<span class="string">'0'</span>); <span class="comment">//加上心的位，通过-'0'实现</span></span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (value * sign);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    assert(<span class="number">5</span> == my_atoi(<span class="string">"5"</span>));</span><br><span class="line">    assert(<span class="number">-2</span> == my_atoi(<span class="string">"-2"</span>));</span><br><span class="line">    assert(<span class="number">-1098273980709871235</span> == my_atoi(<span class="string">"-1098273980709871235"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;面试中比较偏重基础的可能会考察到这一类的具体实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h3&gt;&lt;p&gt;atoi：将字
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经--连续最长数字串</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/15/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E9%9D%A2%E7%BB%8F--%E8%BF%9E%E7%BB%AD%E6%9C%80%E9%95%BF%E6%95%B0%E5%AD%97%E4%B8%B2/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/15/技术/算法/面经--连续最长数字串/</id>
    <published>2018-03-15T15:50:55.000Z</published>
    <updated>2018-03-15T15:50:57.187Z</updated>
    
    <content type="html"><![CDATA[<p>如何连续最长数字串呢？本篇介绍一种C语言实现：</p><h4 id="题"><a href="#题" class="headerlink" title="题"></a>题</h4><p>   在字符串中找出连续最长的数字串，返回最长长度，并把这个最长数字串赋值给其中一个函数参数outputStr所指内存</p><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><p>   “abcd12345ed125ss123456789”的首地址传给intputStr后，函数将返回9，outputStr所指的值为123456789</p><h4 id="析"><a href="#析" class="headerlink" title="析"></a>析</h4><pre><code>我们可以对字符串中的每个数字串计数，然后比较得到最大的。这就是我们所要求的最大连续数字串。需要记住这个最大串的开始位置，还有最大串的长度。</code></pre><ol><li>遍历字符串</li><li>如果遇到数字，则将计数器+1；否则，我们应该统计刚才的数字串的长度和最大长度比较，如果大于最大长度，则重新设置最大长度，并记住数字串开始位置</li><li>返回我们所需要的最大长度和数字串</li></ol><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_max_number</span><span class="params">(<span class="keyword">char</span> <span class="built_in">string</span>[],<span class="keyword">int</span> length,<span class="keyword">int</span> &amp;count, <span class="keyword">char</span> *result )</span></span>&#123;</span><br><span class="line">   <span class="comment">/* max_length represents the max length of number string. */</span></span><br><span class="line">   <span class="keyword">int</span> max_length = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">/* start means first character's position of number string */</span></span><br><span class="line">   <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">/* i represents iterator of string array */</span></span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// here we scan the character array.</span></span><br><span class="line">   <span class="keyword">for</span>( ; i &lt; length; i++ )&#123;</span><br><span class="line">      <span class="comment">// if character belongs to 0~9 we add counter.</span></span><br><span class="line">      <span class="comment">// otherwise we set counter as 0.</span></span><br><span class="line">      <span class="keyword">if</span>( <span class="built_in">string</span>[i] &gt;= <span class="string">'0'</span> &amp;&amp; <span class="built_in">string</span>[i] &lt;= <span class="string">'9'</span> )&#123;</span><br><span class="line">         count ++;</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>( count &gt; max_length )&#123;</span><br><span class="line">            max_length = count;</span><br><span class="line">            start = i - count + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         count  = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// finally we should set max_length and the position again.</span></span><br><span class="line">   <span class="keyword">if</span>( count &gt; max_length )&#123;</span><br><span class="line">      max_length = count;</span><br><span class="line">      start = i - count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// the last, we return counter and the string we need.</span></span><br><span class="line">   count = max_length;</span><br><span class="line">   <span class="built_in">memcpy</span>( result, &amp;<span class="built_in">string</span>[start], count*<span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv )</span></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> <span class="built_in">string</span>[] = <span class="string">"iabcd12345ed125ss123456789"</span>;</span><br><span class="line">   <span class="keyword">char</span> result[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   find_max_number( <span class="built_in">string</span>, <span class="built_in">strlen</span>(<span class="built_in">string</span>), count, result );</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="string">" "</span> &lt;&lt; result &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何连续最长数字串呢？本篇介绍一种C语言实现：&lt;/p&gt;
&lt;h4 id=&quot;题&quot;&gt;&lt;a href=&quot;#题&quot; class=&quot;headerlink&quot; title=&quot;题&quot;&gt;&lt;/a&gt;题&lt;/h4&gt;&lt;p&gt;   在字符串中找出连续最长的数字串，返回最长长度，并把这个最长数字串赋值给其中一个函
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经--计算一个字节有几比特（Java）</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/13/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E9%9D%A2%E7%BB%8F--%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82%E6%9C%89%E5%87%A0%E6%AF%94%E7%89%B9%EF%BC%88Java%EF%BC%89/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/13/技术/算法/面经--计算一个字节有几比特（Java）/</id>
    <published>2018-03-13T15:27:30.000Z</published>
    <updated>2018-03-14T15:14:02.843Z</updated>
    
    <content type="html"><![CDATA[<p>如何逆转链表呢？本篇介绍两种常见方法：</p><ol><li>遍历</li><li>递归</li></ol><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverseHead</span><span class="params">(@Nonnull Node head)</span> </span>&#123;</span><br><span class="line">    Node pre = head;</span><br><span class="line">    Node cur = head.nextNode;</span><br><span class="line">    Node next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        next = cur.nextNode;</span><br><span class="line">        cur.nextNode = pre;</span><br><span class="line"></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    head.nextNode = <span class="keyword">null</span>;</span><br><span class="line">    head = pre;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverseByRecur</span><span class="params">(Node current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span> || current.nextNode == <span class="keyword">null</span>) <span class="keyword">return</span> current;  </span><br><span class="line">    Node nextNode = current.nextNode;  </span><br><span class="line">    current.nextNode = <span class="keyword">null</span>;  </span><br><span class="line">    Node reverseRest = reverseByRecur(nextNode);  </span><br><span class="line">    nextNode.nextNode = current;  </span><br><span class="line">    <span class="keyword">return</span> reverseRest;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何逆转链表呢？本篇介绍两种常见方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;遍历&quot;&gt;&lt;a href=&quot;#遍历&quot; class=&quot;headerlink&quot; title=&quot;遍历&quot;&gt;&lt;/a&gt;遍历&lt;/h5&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经--逆转链表</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/13/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E9%9D%A2%E7%BB%8F--%E9%80%86%E8%BD%AC%E9%93%BE%E8%A1%A8%EF%BC%88Java%EF%BC%89/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/13/技术/算法/面经--逆转链表（Java）/</id>
    <published>2018-03-13T15:27:30.000Z</published>
    <updated>2018-03-14T15:14:08.055Z</updated>
    
    <content type="html"><![CDATA[<p>如何逆转链表呢？本篇介绍两种常见方法：</p><ol><li>遍历</li><li>递归</li></ol><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverseHead</span><span class="params">(@Nonnull Node head)</span> </span>&#123;</span><br><span class="line">    Node pre = head;</span><br><span class="line">    Node cur = head.nextNode;</span><br><span class="line">    Node next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        next = cur.nextNode;</span><br><span class="line">        cur.nextNode = pre;</span><br><span class="line"></span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    head.nextNode = <span class="keyword">null</span>;</span><br><span class="line">    head = pre;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverseByRecur</span><span class="params">(Node current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span> || current.nextNode == <span class="keyword">null</span>) <span class="keyword">return</span> current;  </span><br><span class="line">    Node nextNode = current.nextNode;  </span><br><span class="line">    current.nextNode = <span class="keyword">null</span>;  </span><br><span class="line">    Node reverseRest = reverseByRecur(nextNode);  </span><br><span class="line">    nextNode.nextNode = current;  </span><br><span class="line">    <span class="keyword">return</span> reverseRest;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何逆转链表呢？本篇介绍两种常见方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;遍历&quot;&gt;&lt;a href=&quot;#遍历&quot; class=&quot;headerlink&quot; title=&quot;遍历&quot;&gt;&lt;/a&gt;遍历&lt;/h5&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经--逆转字符串</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/12/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E9%9D%A2%E7%BB%8F--%E9%80%86%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88Java%EF%BC%89/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/12/技术/算法/面经--逆转字符串（Java）/</id>
    <published>2018-03-12T14:50:52.000Z</published>
    <updated>2018-03-14T15:14:05.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面经-逆转字符串（Java）"><a href="#面经-逆转字符串（Java）" class="headerlink" title="[面经] 逆转字符串（Java）"></a>[面经] 逆转字符串（Java）</h3><p>如何逆转字符串呢？本篇介绍几种常见方法：</p><ol><li>暴力解法</li><li>StringBuilder自带的reverse</li><li>reverse源码</li><li>堆栈</li><li>集合的reverse方法</li></ol><h5 id="暴力解法：-利用String-charAt-，倒序地访问-原String的各个char"><a href="#暴力解法：-利用String-charAt-，倒序地访问-原String的各个char" class="headerlink" title="暴力解法： 利用String.charAt()，倒序地访问 原String的各个char"></a>暴力解法： 利用String.charAt()，倒序地访问 原String的各个char</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseIt</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, len = source.length();</span><br><span class="line">    StringBuilder dest = <span class="keyword">new</span> StringBuilder(len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = (len - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--)&#123; <span class="comment">// key</span></span><br><span class="line">        dest.append(source.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dest.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最不装的：直接利用自带reverse方法"><a href="#最不装的：直接利用自带reverse方法" class="headerlink" title="最不装的：直接利用自带reverse方法"></a>最不装的：直接利用自带reverse方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> StringBuilder(hi).reverse().toString()</span><br></pre></td></tr></table></figure><h5 id="这显然没什么营养，我们看看StringBuilder的reverse-做了什么："><a href="#这显然没什么营养，我们看看StringBuilder的reverse-做了什么：" class="headerlink" title="这显然没什么营养，我们看看StringBuilder的reverse()做了什么："></a>这显然没什么营养，我们看看StringBuilder的reverse()做了什么：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String input)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] in = input.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end=in.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(end&gt;begin)&#123; <span class="comment">// key</span></span><br><span class="line">        temp = in[begin];</span><br><span class="line">        in[begin]=in[end];</span><br><span class="line">        in[end] = temp;</span><br><span class="line">        end--;</span><br><span class="line">        begin++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="当然，如果你想被嫌弃，也可以用堆栈："><a href="#当然，如果你想被嫌弃，也可以用堆栈：" class="headerlink" title="当然，如果你想被嫌弃，也可以用堆栈："></a>当然，如果你想被嫌弃，也可以用堆栈：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        stack.push(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty()) &#123; <span class="comment">// key</span></span><br><span class="line">        sb.append(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="或者想被喷出翔，装一下箱，拆一下箱："><a href="#或者想被喷出翔，装一下箱，拆一下箱：" class="headerlink" title="或者想被喷出翔，装一下箱，拆一下箱："></a>或者想被喷出翔，装一下箱，拆一下箱：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseStr</span><span class="params">(String input)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] hello = input.toCharArray();</span><br><span class="line">    List&lt;Character&gt; trial1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c: hello)</span><br><span class="line">        trial1.add(c);</span><br><span class="line"></span><br><span class="line">    Collections.reverse(trial1); <span class="comment">// key</span></span><br><span class="line">    ListIterator li = trial1.listIterator();</span><br><span class="line">    <span class="keyword">while</span> (li.hasNext())</span><br><span class="line">        System.out.print(li.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面经-逆转字符串（Java）&quot;&gt;&lt;a href=&quot;#面经-逆转字符串（Java）&quot; class=&quot;headerlink&quot; title=&quot;[面经] 逆转字符串（Java）&quot;&gt;&lt;/a&gt;[面经] 逆转字符串（Java）&lt;/h3&gt;&lt;p&gt;如何逆转字符串呢？本篇介绍几种常见方
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面经" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>寻找优秀的Programmer</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/11/%E6%8A%80%E6%9C%AF/%E7%AE%A1%E7%90%86/%E5%AF%BB%E6%89%BE%E4%BC%98%E7%A7%80%E7%9A%84Programmer/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/11/技术/管理/寻找优秀的Programmer/</id>
    <published>2018-03-11T07:09:31.000Z</published>
    <updated>2018-03-11T07:09:38.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寻找优秀的Programmer"><a href="#寻找优秀的Programmer" class="headerlink" title="寻找优秀的Programmer"></a>寻找优秀的Programmer</h2><p>最近读的Stack Overflow CEO 博客集锦 《软件随想录 卷2》</p><p>结合其中的两篇：《寻找优秀的程序员》、《寻找优秀的程序员之实战指南》谈谈</p><p>因为作者所处位置，他写作两篇blog的角度其实是一个公司管理人员的角度，作为基础的从业程序员，也有一点的借鉴价值</p><h3 id="优秀的程序员都在哪"><a href="#优秀的程序员都在哪" class="headerlink" title="优秀的程序员都在哪"></a>优秀的程序员都在哪</h3><p>作者的观点</p><ol><li>他们不会出现在招聘市场上</li><li>平均职业生涯求职只有4次</li><li>基本上想上哪工作，就上哪工作，不需要投许多简历</li><li>招聘部门想找到合适的人，就如同在一堆干草中找到一根针</li></ol><h3 id="我们能找到他们吗？"><a href="#我们能找到他们吗？" class="headerlink" title="我们能找到他们吗？"></a>我们能找到他们吗？</h3><ol><li>走出去（不要在大型求职论坛发布没有针对性的招聘广告）</li><li>实习生（一些真正优秀的人，往往10左右就已经开始做自己爱的事情）</li><li>建立自己的社区</li><li>员工推荐：小心陷阱（真实生活中，我一般认为员工推荐是最不可靠的招聘方法之一—— 实际上Google基本只招收员工推荐的人）</li></ol><h3 id="实战指南"><a href="#实战指南" class="headerlink" title="实战指南"></a>实战指南</h3><ol><li>私人办公室（这一条成本太高了）——作者的坚持这一点的理由是 “这能极大地提高效率”</li><li>工作环境</li><li>社交生活<ol><li>如何被对待</li><li>谁是他们的同事</li><li>独立和自主</li><li>不搞政治</li></ol></li><li>干的是什么活？<ol><li>让一流的人挑选他们自己的项目</li><li>使用非热门新技术</li></ol></li><li>能够认同公司吗？</li><li>不在乎的一件事：工资（只要公平合理）</li></ol><p>更多信息：Joel on software <a href="https://www.joelonsoftware.com" target="_blank" rel="noopener">https://www.joelonsoftware.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;寻找优秀的Programmer&quot;&gt;&lt;a href=&quot;#寻找优秀的Programmer&quot; class=&quot;headerlink&quot; title=&quot;寻找优秀的Programmer&quot;&gt;&lt;/a&gt;寻找优秀的Programmer&lt;/h2&gt;&lt;p&gt;最近读的Stack Overflow
      
    
    </summary>
    
      <category term="阅读、管理" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E9%98%85%E8%AF%BB%E3%80%81%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="项目管理" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="读书" scheme="https://github.com/KyleCe/kylece.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>LogFoQATest</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/LogFoQATest/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/LogFoQATest/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2018-03-09T15:32:43.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol><li>判断手机是否存在指定TXT文件。如果存在开始打印log信息进入TXT文件里面。</li><li>加入是否将ORG设置默认的log。</li><li>是否调起menu的log信息。</li><li>打印menu是否拉去广告的log信息，</li><li>其他网络请求。</li></ol><h3 id="实现记录"><a href="#实现记录" class="headerlink" title="实现记录"></a>实现记录</h3><p>所以日志以 QATestInfo 为log的TAG信息</p><ol><li><p>默认包含此功能；</p></li><li><p>SetDefaultHomeOK</p></li><li><p>InvokeMenuPopUp</p></li><li><p>RequestMenuAD</p></li><li><p>可能较耗内存的场景：</p><p>RequestNearbyApp<br>RequestCommonTool</p><p>ImageLoaderLoadImageFromNet<br>ImageLoaderLoadAdmobImageCore<br>VolleyDisplayImage<br>VolleyDecodeImage<br>VolleyDecodeImageFix</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判断手机是否存在指定TXT文件。如果存在开始打印log信息进入TXT文件里面。&lt;/li&gt;
&lt;li&gt;加入是否将ORG设置默认的lo
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶——接口优于抽象类</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E4%BC%98%E4%BA%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶——接口优于抽象类/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2018-03-09T15:22:18.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇系Java进阶系列 篇4.18，介绍<strong>接口</strong>相较于<strong>抽象类</strong>的优点</p><p>跑题1——一直牢记的一点“100%的坚持比百分之九十几的坚持更容易”又一次体会到，上周跟随部门团建出去旅游，一旦停更就是将近一周，希望能把原则秉持下来</p><p>跑题2——今天看了new iPhone的发布会，依旧很精致，不知何时Android能有赶上iPhone水准的机器面世</p></blockquote><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><p>抽象类可以包含部分实现，接口不可以（Java8接口中可以定义默认方法，但不推荐如此使用接口）</p><p>为了实现抽象类定义的类型，必须extends 抽象类，限制了其可扩展性</p><h3 id="接口的优势"><a href="#接口的优势" class="headerlink" title="接口的优势"></a>接口的优势</h3><ul><li>已有类可以很容易被更新，以实现新接口</li><li>接口是定义mixin（像中文“迷信”，实则取自此词，代表混合类型）的理想选择</li><li>允许我们构造非层次结构的类型框架（就像我们每个人身怀多技一样，每个类也可能有多种特性）</li><li>使得增强类的功能更加安全</li></ul><h3 id="pay-attention"><a href="#pay-attention" class="headerlink" title="pay attention"></a>pay attention</h3><ul><li><p>公共接口一旦被公开，修改起来就极其麻烦，所谓牵一发而动全身，所以设计接口时要谨慎；</p><blockquote><p>实际项目中发现这个点其实是一个经验问题，又要最小化接口，又要把接口设计得符合<strong>SOLID</strong>设计模式五大原则，就要求我们在实际工作中训练好这个技能，把握好接口设计的度</p></blockquote></li><li><p>抽象类也并非一无是处，它的改变就比接口要简易的多，实际使用时也是体验很好的一种设计方法，不过抽象类的使用也要有所衡量，只有在确实是属于一个类别的类时才好去使用抽象类，否则就违背了我们的编程原则</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇系Java进阶系列 篇4.18，介绍&lt;strong&gt;接口&lt;/strong&gt;相较于&lt;strong&gt;抽象类&lt;/strong&gt;的优点&lt;/p&gt;
&lt;p&gt;跑题1——一直牢记的一点“100%的坚持比百分之九十几的坚持更容易”又一次体会到，上周跟随部门团建出去
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶——接口优于抽象类</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6--%E8%A2%AB%E7%94%A8%E7%83%82%E7%9A%84%22%E7%BB%A7%E6%89%BF%22/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶--被用烂的&quot;继承&quot;/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2018-03-09T15:52:09.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要与关键字"><a href="#摘要与关键字" class="headerlink" title="摘要与关键字"></a>摘要与关键字</h3><p>继承很强大，但也有问题</p><p>确实是is-a关系时才使用继承</p><p>如果处在不同的包中，并且SuperClass不是为继承设计的，这时会导致脆弱性</p><p>可以使用复合和转发机制来代替继承来避免这种脆弱性</p><p>关键字:</p><p><strong>继承、复合、装饰者模式、包装类、转发</strong></p><blockquote><p>keywords:</p><p>继承(inheritance)、复合(composition)、装饰者模式(decorator)、包装类(WrapperClass)、转发(forwarding)</p></blockquote><p><em>为叙述方便，下文以CC代表子类，SC代表超类，也就是父类</em></p><h3 id="问题体现"><a href="#问题体现" class="headerlink" title="问题体现"></a>问题体现</h3><p><strong>继承打破了封装性</strong></p><p>CC依赖于SC的实现细节，在SC更新换代时，CC会受影响，严重的会导致错误，为了避免出现错误，时常要做的事情是跟着SC的更新而更新CC</p><p>其实你可以直接使用<strong>复合</strong>来避免这一问题出现——也就是，在原来的CC中添加一个SC的实例</p><p>这样新的类中可以直接使用SC的方法逻辑，而不用担心SC更新时要升级API的问题（概念：<strong>转发</strong>）</p><p>这样的类也被称为<strong>包装类</strong></p><p>这也引出了设计模式中的Decorator模式概念（<strong>装饰者模式</strong>）</p><h3 id="强制使用的弊端"><a href="#强制使用的弊端" class="headerlink" title="强制使用的弊端"></a>强制使用的弊端</h3><ul><li>暴露不必要的SC细节</li><li>永远地限制了CC的性能（使用复合模式则可以在需要时更换转发的具体实现）</li><li>导致语义混淆</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;摘要与关键字&quot;&gt;&lt;a href=&quot;#摘要与关键字&quot; class=&quot;headerlink&quot; title=&quot;摘要与关键字&quot;&gt;&lt;/a&gt;摘要与关键字&lt;/h3&gt;&lt;p&gt;继承很强大，但也有问题&lt;/p&gt;
&lt;p&gt;确实是is-a关系时才使用继承&lt;/p&gt;
&lt;p&gt;如果处在不同的包中，并且
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶-- 利用有限制通配符来提升API的灵活性</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6--%20%E5%88%A9%E7%94%A8%E6%9C%89%E9%99%90%E5%88%B6%E9%80%9A%E9%85%8D%E7%AC%A6%E6%9D%A5%E6%8F%90%E5%8D%87API%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶-- 利用有限制通配符来提升API的灵活性/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2019-03-20T14:51:17.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="词条"><a href="#词条" class="headerlink" title="词条"></a>词条</h3><p>通配符— ‘?’</p><p>有限制的通配符 —</p><ul><li>? extends E</li><li>? super E</li></ul><p>PECS — producer-extends, consumer-super</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>输入参数是生产者或消费者时使用’?’</p><p>所有的compare和comparator都是consumer</p><p>声明方法时，用’?’取代仅出现一次的的类型参数</p><h3 id="优势体现——论其必要性"><a href="#优势体现——论其必要性" class="headerlink" title="优势体现——论其必要性"></a>优势体现——论其必要性</h3><p>我们先看之前讲 <strong>优先考虑泛型</strong>时的一个示例：</p><p><img src="http://kylece.github.io/img/pic_resource/GenericMethodEgClass.png" alt=""></p><p>考虑为它增加一个方法：</p><p><img src="http://kylece.github.io/img/pic_resource/StackPushAll.png" alt=""></p><p>这样的定义，在使用中会存在不灵活的问题：因为类型在定义之后就不可变了，如果想要将一个非E类型的Iterable  push到Stack中是不可能的，这样的事实我们显然不能接受，那么该如何修改呢？答案就在本篇的主角——通配符’?’上</p><p>将上述API的参数修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterable&lt;? extends E&gt; src</span><br></pre></td></tr></table></figure><p>即可达到目的</p><p>说完? extends，再来看? super，同样考虑Stack的API，这一次是将Stack中的元素全部弹出到目标集合</p><p><img src="http://kylece.github.io/img/pic_resource/StackPopAll.png" alt=""></p><p>理想状态下，所有的子类型的Stack都可以弹出到父类型的集合，但上图的API并不能实现这一目的；我们需要这样修改：</p><p>将参数类型修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;? <span class="keyword">super</span> E&gt; dst</span><br></pre></td></tr></table></figure><p>这样一来，任意继承自父类型的Stack就都可以pop到父类型集合了，是不是很带感</p><p>有的同学可能会产生疑惑了，一会儿extends，一会儿super，好晕</p><p>还好有规律可总结：</p><p>PECS——producer-extends, consumer-super</p><p>即参数列表中  生产者总是使用? extends，而消费者则总是使用 ? super（不了解生产者、消费者设计模式的同学请自行翻书）</p><h3 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h3><p>原始API声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">max1</span><span class="params">(List&lt;T&gt; list)</span></span></span><br></pre></td></tr></table></figure><p>修改后的API声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">max2</span><span class="params">(List&lt;? extends T&gt; list)</span></span></span><br></pre></td></tr></table></figure><p>这一修改后的API，pecs都用上了，真有必要弄这么复杂了？</p><p>答案是肯定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ScheduleFuture&lt;?&gt;&gt; futures = ...;</span><br></pre></td></tr></table></figure><p>这一futures不能调用max1方法，原因在于ScheduleFuture扩展的是Compare接口的Delayed接口的子接口，它可以与任意Delayed进行compare；而max2方法这样的声明就不会有这问题</p><h3 id="E-与-‘-’"><a href="#E-与-‘-’" class="headerlink" title="E 与 ‘?’"></a>E 与 ‘?’</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;E&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br></pre></td></tr></table></figure><p>你看上哪个了呢？</p><p>从灵活性的角度考虑，肯定是第二种好一些，但在类型参数不止一个时，就不能用’?’ 而要用类型参数了</p><p>使用第二种时需要注意：</p><p>只能把null放入List&lt;?&gt;中，这时为了保证灵活性，就需要写一个辅助捕捉类型的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">  swapTrick(list, i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swapTrick</span><span class="params">(List&lt;E&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    list.set(i, list.set(j, list.get(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>这一篇看起来似乎有点绕，但我们真正在项目中写公共库API时，其实是需要用到’?’的，不是为了装，是真的能提升API的适用范围，减少工作量</p><p>不过任何收获都是要付出代价的，在写出高适用度的API时，一定记得写单元测试，进行高覆盖度的验证，保证准确性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;词条&quot;&gt;&lt;a href=&quot;#词条&quot; class=&quot;headerlink&quot; title=&quot;词条&quot;&gt;&lt;/a&gt;词条&lt;/h3&gt;&lt;p&gt;通配符— ‘?’&lt;/p&gt;
&lt;p&gt;有限制的通配符 —&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;? extends E&lt;/li&gt;
&lt;li&gt;? super E&lt;
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶--for-each与传统for</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6--for-each%E4%B8%8E%E4%BC%A0%E7%BB%9Ffor/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶--for-each与传统for/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2018-03-09T15:22:18.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>for-each 相较于 传统的 for-i更优</p><p>自己编写的类在代表一组元素时，即使不实现Collection也要让它实现Iterable</p><h3 id="体现"><a href="#体现" class="headerlink" title="体现"></a>体现</h3><p>for-each循环在预防bug方面与传统for循环有着无可比拟的优势</p><ul><li>传统for</li><li>for-each</li></ul><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>implement Iterable接口，示例：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;for-each 相较于 传统的 for-i更优&lt;/p&gt;
&lt;p&gt;自己编写的类在代表一组元素时，即使不实现Collection也要让它实现It
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
      <category term="for-each" scheme="https://github.com/KyleCe/kylece.github.io/tags/for-each/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶-- 优先考虑泛型方法</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6--%20%E4%BC%98%E5%85%88%E8%80%83%E8%99%91%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶-- 优先考虑泛型方法/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2019-03-20T14:51:18.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>类可以从泛型中受益，静态工具API更适合泛型</p><blockquote><p>Collections 的算法方法都已泛型化(如binarySearch、sort)</p></blockquote><h3 id="优势示例"><a href="#优势示例" class="headerlink" title="优势示例"></a>优势示例</h3><ul><li>例1：精简API</li></ul><p><img src="http://kylece.github.io/img/pic_resource/GenericMethodEg.png" alt=""></p><p>代码所示是一个简单的设置字体的Util的static API的泛型化代码；</p><p>如果不是使用这种泛型化的API，则需要为TextView的扩展类（Button、CheckBox等等）编写数不清的函数</p><ul><li>例2：确保类型安全的情况下提升API的易用性</li></ul><p><img src="http://kylece.github.io/img/pic_resource/GenericMethodEg2.png" alt=""></p><p>可以看到上面的API可以轻易的操作所有以View为基类的类的集合；</p><ul><li>例3：类级别的泛型化</li></ul><p><img src="http://kylece.github.io/img/pic_resource/GenericMethodEgClass.png" alt=""></p><blockquote><p>在配合集合使用时需要注意类型cast的警告，这些警告实际上是编译时不会有问题，但真正在运行时可能会抛出ClassCastException，我们在实际项目中应该将这些潜在的威胁清除掉；</p><p>对于十分确定不会出问题的类型操作API上，可以用@SuppressWarning(“unckecked”)消除这类警告</p></blockquote><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>赶紧用起来吧，你的小伙伴会爱上你写的极简API的</p><blockquote><p>源码里的代码有很多写的极好的点，同学们平时可以扒一扒</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;适用范围&quot;&gt;&lt;a href=&quot;#适用范围&quot; class=&quot;headerlink&quot; title=&quot;适用范围&quot;&gt;&lt;/a&gt;适用范围&lt;/h3&gt;&lt;p&gt;类可以从泛型中受益，静态工具API更适合泛型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Collections 的算法方法都已
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶-- 以函数对象代表策略</title>
    <link href="https://github.com/KyleCe/kylece.github.io/2018/03/09/%E6%8A%80%E6%9C%AF/%E7%A8%8B%E5%BA%8F/Java%E8%BF%9B%E9%98%B6--%20%E4%BB%A5%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E4%BB%A3%E8%A1%A8%E7%AD%96%E7%95%A5/"/>
    <id>https://github.com/KyleCe/kylece.github.io/2018/03/09/技术/程序/Java进阶-- 以函数对象代表策略/</id>
    <published>2018-03-08T16:35:35.000Z</published>
    <updated>2018-03-09T15:22:18.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要与关键字"><a href="#摘要与关键字" class="headerlink" title="摘要与关键字"></a>摘要与关键字</h3><p>介绍设计模式中的策略模式（strategy）</p><p>C++、C语言中的函数指针在Java中的替代形式</p><p>面向接口编程</p><p>keywords：</p><p><strong>策略、函数对象、面向接口</strong></p><h3 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h3><p>函数指针，或是实现代理模式、lambda表达式</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;摘要与关键字&quot;&gt;&lt;a href=&quot;#摘要与关键字&quot; class=&quot;headerlink&quot; title=&quot;摘要与关键字&quot;&gt;&lt;/a&gt;摘要与关键字&lt;/h3&gt;&lt;p&gt;介绍设计模式中的策略模式（strategy）&lt;/p&gt;
&lt;p&gt;C++、C语言中的函数指针在Java中的替代形式
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/KyleCe/kylece.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/KyleCe/kylece.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
